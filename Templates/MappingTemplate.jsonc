[
    // TEMPLATE
    //    NOTE: You only need to add the properties you need inside of `SearchParams`
    {
        "NewTypeName": "TEMPLATE",          // This is the name we want to change it to
        "OriginalTypeName": "",             // This is the name of the object in the assembly, Can be used to store what type you're changing as its not read unless "UseDirectRename" is true, it is also written to after remapping
        "UseForceRename": false,            // If this is true, directly remap using the name in the assembly from the above property
        "SearchParams": {                   // null means disabled
            "IsPublic": null,               // Is the Type public? (bool)
            "IsAbstract": null,             // Is the Type Abstract? (bool)
            "IsInterface": null,            // Is the Type an Interface? (bool)
            "IsEnum": null,                 // Is the Type an Enum? (bool)
            "IsNested": null,               // Is the Type Nested? (bool)
            "ParentName": "",               // The Name of the parent type if it is nested, can be left empty (string)
            "IsSealed": null,               // Is the Type Sealed? (bool)
            "HasAttribute": null,           // Does the Type have an attribute? (bool)
            "IsDerived": null,              // Does the Type inherit from another Type? (bool)
            "MatchBaseClass": "",           // Base class to match (IsDerived must be enabled)
            "IgnoreBaseClass": "",          // Base class to ignore (IsDerived must be enabled)
            "HasGenericParameters": null,   // Does the type have generic parameters? (bool)
            // Note:
            //      - You can can filter the ignore list with a wild card '*' to match all types that have none of that search parameter
            //      - These are all lists of strings

            "MatchMethods": [               // This is a list of methods we want to match 
            ],
            "IgnoreMethods": [              // This is a list of methods we want to ignore                                           
            ],
            "MatchFields": [                // This is a list of fields we want to match
            ],
            "IgnoreFields": [               // This is a list of fields we want to ignore
            ],
            "MatchProperties": [            // This is a list of properties we want to match
            ],
            "IgnorePropterties": [          // This is a list of properties we want to ignore
            ],
            "MatchNestedTypes": [           // This is a list of nested types we want to match 
            ],
            "IgnoreNestedTypes": [          // This is a list of nested types we want to match ignore
            ]    
        }
    }
]